{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { DatePipe } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet EventosFormComponent = class EventosFormComponent {\n  constructor(fb, eventoService, router, activatedRoute, datePipe, participantesService) {\n    this.fb = fb;\n    this.eventoService = eventoService;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.datePipe = datePipe;\n    this.participantesService = participantesService;\n    this.modoAgregar = false;\n    this.modoVerDetalle = false;\n    this.modoInscribirParticipane = false;\n    this.participantesABorrar = [];\n  }\n  ngOnInit() {\n    this.formGroup = this.fb.group({\n      nombre: ['', Validators.required],\n      descripcion: ['', Validators.required],\n      ubicacion: ['', Validators.required],\n      informacionContacto: ['', Validators.required],\n      fechaInicio: ['', Validators.required],\n      fechaFin: ['', Validators.required],\n      estado: {\n        value: 'Activo',\n        disabled: this.modoVerDetalle\n      },\n      participantes: this.fb.array([])\n    });\n    this.activatedRoute.params.subscribe(params => {\n      if (params['id'] === undefined) {\n        this.modoAgregar = true; // a\n        return;\n      }\n      //this.modoVerDetalle = true;\n      this.eventoId = params['id'];\n      const urlSegments = this.activatedRoute.snapshot.url.map(segment => segment.path);\n      if (urlSegments.includes('inscribir-participante')) {\n        this.modoInscribirParticipane = true;\n      } else {\n        this.modoVerDetalle = true;\n      }\n      //\n      this.eventoId = params['id'];\n      this.eventoService.getEvento(this.eventoId.toString()).subscribe(evento => this.cargarFormulario(evento), error => console.error(error));\n    });\n    if (this.modoVerDetalle || this.modoInscribirParticipane) {\n      //a\n      this.formGroup.disable();\n    }\n  }\n  get participantes() {\n    return this.formGroup.get('participantes');\n  }\n  agregarParticipante() {\n    this.participantes.push(this.construirParticipante());\n  }\n  construirParticipante() {\n    return this.fb.group({\n      id: [0],\n      nombre: [''],\n      direccion: [''],\n      fechaNacimiento: [new Date()],\n      correo: [''],\n      numeroTelefono: [''],\n      organizacion: [''],\n      profesion: [''],\n      cargo: [''],\n      eventoId: this.eventoId != null ? this.eventoId : 0\n    });\n  }\n  removerParticipante(index) {\n    let participanteRemover = this.participantes.at(index);\n    if (participanteRemover.controls['id'].value != '0') {\n      this.participantesABorrar.push(participanteRemover.controls['id'].value);\n    }\n    this.participantes.removeAt(index);\n  }\n  cargarFormulario(evento) {\n    const format = 'yyyy-MM-dd';\n    this.formGroup.patchValue({\n      nombre: evento.nombre,\n      descripcion: evento.descripcion,\n      ubicacion: evento.ubicacion,\n      informacionContacto: evento.informacionContacto,\n      fechaInicio: this.datePipe.transform(evento.fechaInicio, format),\n      fechaFin: this.datePipe.transform(evento.fechaFin, format),\n      estado: evento.estado\n    });\n    const participantesFormArray = this.fb.array(evento.participantes.map(participante => this.fb.group(participante)));\n    this.formGroup.setControl('participantes', participantesFormArray);\n    // let participantes = this.formGroup.controls['participantes'] as FormArray;\n    // evento.participantes.forEach(participante => {\n    //   let participanteFG = this.construirParticipante();\n    //   participanteFG.patchValue(participante);\n    //   participantes.push(participanteFG);\n    // })\n  }\n\n  save() {\n    if (this.modoVerDetalle && this.modoAgregar) return; //a\n    let evento = Object.assign({}, this.formGroup.value);\n    console.table(evento);\n    if (this.modoInscribirParticipane) {\n      //EDITAR EL REGISTRO\n      evento.id = this.eventoId;\n      //console.log(this.eventoId);\n      this.eventoService.updateEvento(evento).subscribe(evento => this.borrarParticipante(), error => console.error(error));\n    } else {\n      //AGREGAR REGISTRO\n      this.eventoService.createEvento(evento).subscribe(evento => this.onSaveSuccess(), error => console.error(error));\n    }\n  }\n  borrarParticipante() {\n    if (this.participantesABorrar.length === 0) {\n      this.onSaveSuccess();\n      return;\n    }\n    this.participantesService.deleteParticipantes(this.participantesABorrar).subscribe(() => this.onSaveSuccess(), error => console.error(error));\n  }\n  onSaveSuccess() {\n    this.router.navigate(['/eventos']);\n  }\n};\nEventosFormComponent = __decorate([Component({\n  selector: 'app-eventos-form',\n  templateUrl: './eventos-form.component.html',\n  styleUrls: ['./eventos-form.component.css'],\n  providers: [DatePipe]\n})], EventosFormComponent);\nexport { EventosFormComponent };","map":{"version":3,"mappings":"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","names":["DatePipe","Component","Validators","EventosFormComponent","constructor","fb","eventoService","router","activatedRoute","datePipe","participantesService","ngOnInit","formGroup","group","nombre","required","descripcion","ubicacion","informacionContacto","fechaInicio","fechaFin","estado","value","disabled","modoVerDetalle","participantes","array","params","subscribe","undefined","modoAgregar","eventoId","urlSegments","snapshot","url","map","segment","path","includes","modoInscribirParticipane","getEvento","toString","evento","cargarFormulario","error","console","disable","get","agregarParticipante","push","construirParticipante","id","direccion","fechaNacimiento","Date","correo","numeroTelefono","organizacion","profesion","cargo","removerParticipante","index","participanteRemover","at","controls","participantesABorrar","removeAt","format","patchValue","transform","participantesFormArray","participante","setControl","save","Object","assign","table","updateEvento","borrarParticipante","createEvento","onSaveSuccess","length","deleteParticipantes","navigate","selector","templateUrl","styleUrls","providers"],"sourceRoot":"","sources":["C:\\Users\\Diego\\Desktop\\ParcialFinalTaller\\parcialTallerFinal\\Examen4\\ClientApp\\src\\app\\eventos\\eventos-form\\eventos-form.component.ts"],"sourcesContent":["import { DatePipe } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IEvento } from '../Evento';\nimport { EventosService } from '../eventos.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ParticipantesService } from 'src/app/participantes/participantes.service';\n\n@Component({\n  selector: 'app-eventos-form',\n  templateUrl: './eventos-form.component.html',\n  styleUrls: ['./eventos-form.component.css'],\n  providers: [DatePipe]\n})\nexport class EventosFormComponent implements OnInit {\n\n  formGroup!: FormGroup;\n  //modoVerDetalle: boolean = false; // Set this based on your logic\n  eventoId! : number;\n\n  modoAgregar: boolean = false;\n  modoVerDetalle: boolean = false;\n  modoInscribirParticipane: boolean = false;\n  participantesABorrar: number[] = [];\n\n\n  constructor(private fb: FormBuilder,\n              private eventoService: EventosService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private datePipe: DatePipe,\n              private participantesService: ParticipantesService) {}\n\n  ngOnInit() {\n    this.formGroup = this.fb.group({\n      nombre: ['', Validators.required],\n      descripcion: ['', Validators.required],\n      ubicacion: ['', Validators.required],\n      informacionContacto: ['', Validators.required],\n      fechaInicio: ['', Validators.required],\n      fechaFin: ['', Validators.required],\n      estado: { value: 'Activo', disabled: this.modoVerDetalle },\n      participantes: this.fb.array([])\n    });\n\n    \n    this.activatedRoute.params.subscribe(params => {\n      if (params['id'] === undefined) {\n        this.modoAgregar = true;// a\n        return;\n      }\n      //this.modoVerDetalle = true;\n\n      this.eventoId = params['id'];\n\n      const urlSegments = this.activatedRoute.snapshot.url.map(segment => segment.path);\n      if (urlSegments.includes('inscribir-participante')) {\n        this.modoInscribirParticipane = true;\n      } else {\n        this.modoVerDetalle = true;\n      }\n\n//\n      this.eventoId = params['id'];\n      this.eventoService.getEvento(this.eventoId.toString())\n        .subscribe(evento => this.cargarFormulario(evento),\n                   error => console.error(error));\n    });\n\n\n    if (this.modoVerDetalle  || this.modoInscribirParticipane) { //a\n      this.formGroup.disable();\n    }\n  }\n\n\n  get participantes(): FormArray {\n    return this.formGroup.get('participantes') as FormArray;\n  }\n\n  agregarParticipante() {\n    this.participantes.push(this.construirParticipante());\n  }\n\n  construirParticipante(): FormGroup {\n    return this.fb.group({\n      id: [0],\n      nombre: [''],\n      direccion: [''],\n      fechaNacimiento: [new Date()],\n      correo: [''],\n      numeroTelefono: [''],\n      organizacion: [''],\n      profesion: [''],\n      cargo: [''],\n      eventoId: this.eventoId != null ? this.eventoId : 0\n    });\n  }\n\n  removerParticipante(index : number) {\n    let participanteRemover = this.participantes.at(index) as FormGroup;\n    if (participanteRemover.controls['id'].value != '0') {\n      this.participantesABorrar.push(<number>participanteRemover.controls['id'].value);\n    }\n    this.participantes.removeAt(index);\n  }\n\n\n  cargarFormulario(evento : IEvento){\n    const format = 'yyyy-MM-dd';\n\n    this.formGroup.patchValue({\n      nombre: evento.nombre,\n      descripcion: evento.descripcion,\n      ubicacion: evento.ubicacion,\n      informacionContacto: evento.informacionContacto,\n      fechaInicio: this.datePipe.transform(evento.fechaInicio, format),\n      fechaFin: this.datePipe.transform(evento.fechaFin, format),\n      estado: evento.estado\n    });\n\n    const participantesFormArray = this.fb.array(\n      evento.participantes.map(participante => this.fb.group(participante))\n    );\n    this.formGroup.setControl('participantes', participantesFormArray);\n    // let participantes = this.formGroup.controls['participantes'] as FormArray;\n    // evento.participantes.forEach(participante => {\n    //   let participanteFG = this.construirParticipante();\n    //   participanteFG.patchValue(participante);\n    //   participantes.push(participanteFG);\n    // })\n\n  }\n\n\n  save() {\n    if (this.modoVerDetalle && this.modoAgregar ) return;//a\n\n    let evento: IEvento = Object.assign({}, this.formGroup.value);\n    console.table(evento);\n\n\n    if(this.modoInscribirParticipane){\n      //EDITAR EL REGISTRO\n      evento.id = this.eventoId\n      //console.log(this.eventoId);\n      this.eventoService.updateEvento(evento)\n        .subscribe(evento => this.borrarParticipante(),\n        error => console.error(error)\n      )\n    }else{ \n      //AGREGAR REGISTRO\n    this.eventoService.createEvento(evento)\n      .subscribe(evento => this.onSaveSuccess(),\n                 error => console.error(error));\n    }\n\n  }\n\n  borrarParticipante(){\n    if(this.participantesABorrar.length===0){\n      this.onSaveSuccess();\n      return;\n    }\n\n    this.participantesService.deleteParticipantes(this.participantesABorrar)\n      .subscribe(()=> this.onSaveSuccess(),\n        error => console.error(error))\n  }\n\n\n\n  onSaveSuccess() {\n    this.router.navigate(['/eventos']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}