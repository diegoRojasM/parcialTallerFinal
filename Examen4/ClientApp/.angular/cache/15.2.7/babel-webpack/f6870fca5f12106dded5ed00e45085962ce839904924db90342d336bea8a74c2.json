{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { DatePipe } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet EventosFormComponent = class EventosFormComponent {\n  constructor(fb, eventoService, router, activatedRoute, datePipe) {\n    this.fb = fb;\n    this.eventoService = eventoService;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.datePipe = datePipe;\n    this.modoAgregar = false;\n    this.modoVerDetalle = false;\n    this.modoInscribirParticipane = false;\n  }\n  ngOnInit() {\n    this.formGroup = this.fb.group({\n      nombre: ['', Validators.required],\n      descripcion: ['', Validators.required],\n      ubicacion: ['', Validators.required],\n      informacionContacto: ['', Validators.required],\n      fechaInicio: ['', Validators.required],\n      fechaFin: ['', Validators.required],\n      estado: {\n        value: 'Activo',\n        disabled: this.modoVerDetalle\n      }\n    });\n    this.activatedRoute.params.subscribe(params => {\n      if (params['id'] === undefined) {\n        this.modoAgregar = true; // a\n        return;\n      }\n      //this.modoVerDetalle = true;\n      this.eventoId = params['id'];\n      const urlSegments = this.activatedRoute.snapshot.url.map(segment => segment.path);\n      if (urlSegments.includes('inscribir-participante')) {\n        this.modoInscribirParticipane = true;\n      } else {\n        this.modoVerDetalle = true;\n      }\n      //\n      this.eventoId = params['id'];\n      this.eventoService.getEvento(this.eventoId.toString()).subscribe(evento => this.cargarFormulario(evento), error => console.error(error));\n    });\n    // if (this.modoVerDetalle  || this.modoInscribirParticipane) { //a\n    //   this.formGroup.disable();\n    // }\n  }\n\n  cargarFormulario(evento) {\n    const format = 'yyyy-MM-dd';\n    this.formGroup.patchValue({\n      nombre: evento.nombre,\n      descripcion: evento.descripcion,\n      ubicacion: evento.ubicacion,\n      informacionContacto: evento.informacionContacto,\n      fechaInicio: this.datePipe.transform(evento.fechaInicio, format),\n      fechaFin: this.datePipe.transform(evento.fechaFin, format),\n      estado: evento.estado\n    });\n  }\n  save() {\n    if (this.modoVerDetalle || this.modoInscribirParticipane) return; //a\n    let evento = Object.assign({}, this.formGroup.value);\n    console.table(evento);\n    //this.if(this.modoVerDetalle)\n    if (this.modoInscribirParticipane) {\n      //EDITAR EL REGISTRO\n      evento.id = this.eventoId;\n      //console.log(this.eventoId);\n      this.eventoService.updateEvento(evento).subscribe(evento => this.onSaveSuccess(), error => console.error(error));\n    } else {\n      //AGREGAR REGISTRO\n      this.eventoService.createEvento(evento).subscribe(evento => this.onSaveSuccess(), error => console.error(error));\n    }\n  }\n  //   if (this.modoEdicion) {\n  //     persona.id = this.personaId;\n  //     this.personaService.updatePersona(persona)\n  //       .subscribe(() => this.borrarDirecciones(),\n  //                  error => console.error(error));\n  //   } else {\n  //     this.personaService.createPersona(persona)\n  //       .subscribe(() => this.onSaveSuccess(),\n  //                  error => console.error(error));\n  //   }\n  // }\n  onSaveSuccess() {\n    this.router.navigate(['/eventos']);\n  }\n};\nEventosFormComponent = __decorate([Component({\n  selector: 'app-eventos-form',\n  templateUrl: './eventos-form.component.html',\n  styleUrls: ['./eventos-form.component.css'],\n  providers: [DatePipe]\n})], EventosFormComponent);\nexport { EventosFormComponent };","map":{"version":3,"mappings":";AAAA,SAASA,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAW5D,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAS/BC,YAAoBC,EAAe,EACfC,aAA6B,EAC7BC,MAAc,EACdC,cAA8B,EAC9BC,QAAkB;IAJlB,OAAE,GAAFJ,EAAE;IACF,kBAAa,GAAbC,aAAa;IACb,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IACd,aAAQ,GAARC,QAAQ;IAR5B,gBAAW,GAAY,KAAK;IAC5B,mBAAc,GAAY,KAAK;IAC/B,6BAAwB,GAAY,KAAK;EAMC;EAE1CC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAC7BC,MAAM,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MACjCC,WAAW,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ,CAAC;MACtCE,SAAS,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACY,QAAQ,CAAC;MACpCG,mBAAmB,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACY,QAAQ,CAAC;MAC9CI,WAAW,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACY,QAAQ,CAAC;MACtCK,QAAQ,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACY,QAAQ,CAAC;MACnCM,MAAM,EAAE;QAAEC,KAAK,EAAE,QAAQ;QAAEC,QAAQ,EAAE,IAAI,CAACC;MAAc;KACzD,CAAC;IAGF,IAAI,CAACf,cAAc,CAACgB,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MAC5C,IAAIA,MAAM,CAAC,IAAI,CAAC,KAAKE,SAAS,EAAE;QAC9B,IAAI,CAACC,WAAW,GAAG,IAAI,CAAC;QACxB;;MAEF;MAEA,IAAI,CAACC,QAAQ,GAAGJ,MAAM,CAAC,IAAI,CAAC;MAE5B,MAAMK,WAAW,GAAG,IAAI,CAACrB,cAAc,CAACsB,QAAQ,CAACC,GAAG,CAACC,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC;MACjF,IAAIL,WAAW,CAACM,QAAQ,CAAC,wBAAwB,CAAC,EAAE;QAClD,IAAI,CAACC,wBAAwB,GAAG,IAAI;OACrC,MAAM;QACL,IAAI,CAACb,cAAc,GAAG,IAAI;;MAGlC;MACM,IAAI,CAACK,QAAQ,GAAGJ,MAAM,CAAC,IAAI,CAAC;MAC5B,IAAI,CAAClB,aAAa,CAAC+B,SAAS,CAAC,IAAI,CAACT,QAAQ,CAACU,QAAQ,EAAE,CAAC,CACnDb,SAAS,CAACc,MAAM,IAAI,IAAI,CAACC,gBAAgB,CAACD,MAAM,CAAC,EACvCE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;IAC7C,CAAC,CAAC;IAGF;IACA;IACA;EACF;;EAEAD,gBAAgB,CAACD,MAAgB;IAC/B,MAAMI,MAAM,GAAG,YAAY;IAE3B,IAAI,CAAChC,SAAS,CAACiC,UAAU,CAAC;MACxB/B,MAAM,EAAE0B,MAAM,CAAC1B,MAAM;MACrBE,WAAW,EAAEwB,MAAM,CAACxB,WAAW;MAC/BC,SAAS,EAAEuB,MAAM,CAACvB,SAAS;MAC3BC,mBAAmB,EAAEsB,MAAM,CAACtB,mBAAmB;MAC/CC,WAAW,EAAE,IAAI,CAACT,QAAQ,CAACoC,SAAS,CAACN,MAAM,CAACrB,WAAW,EAAEyB,MAAM,CAAC;MAChExB,QAAQ,EAAE,IAAI,CAACV,QAAQ,CAACoC,SAAS,CAACN,MAAM,CAACpB,QAAQ,EAAEwB,MAAM,CAAC;MAC1DvB,MAAM,EAAEmB,MAAM,CAACnB;KAChB,CAAC;EACJ;EAEA0B,IAAI;IACF,IAAI,IAAI,CAACvB,cAAc,IAAI,IAAI,CAACa,wBAAwB,EAAG,OAAO;IAElE,IAAIG,MAAM,GAAYQ,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACrC,SAAS,CAACU,KAAK,CAAC;IAC7DqB,OAAO,CAACO,KAAK,CAACV,MAAM,CAAC;IAErB;IACA,IAAG,IAAI,CAACH,wBAAwB,EAAC;MAC/B;MACAG,MAAM,CAACW,EAAE,GAAG,IAAI,CAACtB,QAAQ;MACzB;MACA,IAAI,CAACtB,aAAa,CAAC6C,YAAY,CAACZ,MAAM,CAAC,CACpCd,SAAS,CAACc,MAAM,IAAI,IAAI,CAACa,aAAa,EAAE,EACzCX,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAC9B;KACF,MAAI;MACH;MACF,IAAI,CAACnC,aAAa,CAAC+C,YAAY,CAACd,MAAM,CAAC,CACpCd,SAAS,CAACc,MAAM,IAAI,IAAI,CAACa,aAAa,EAAE,EAC9BX,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;;EAG7C;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EASAW,aAAa;IACX,IAAI,CAAC7C,MAAM,CAAC+C,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;EACpC;CACD;AArHYnD,oBAAoB,eANhCF,SAAS,CAAC;EACTsD,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B,CAAC;EAC3CC,SAAS,EAAE,CAAC1D,QAAQ;CACrB,CAAC,GACWG,oBAAoB,CAqHhC;SArHYA,oBAAoB","names":["DatePipe","Component","Validators","EventosFormComponent","constructor","fb","eventoService","router","activatedRoute","datePipe","ngOnInit","formGroup","group","nombre","required","descripcion","ubicacion","informacionContacto","fechaInicio","fechaFin","estado","value","disabled","modoVerDetalle","params","subscribe","undefined","modoAgregar","eventoId","urlSegments","snapshot","url","map","segment","path","includes","modoInscribirParticipane","getEvento","toString","evento","cargarFormulario","error","console","format","patchValue","transform","save","Object","assign","table","id","updateEvento","onSaveSuccess","createEvento","navigate","selector","templateUrl","styleUrls","providers"],"sourceRoot":"","sources":["C:\\Users\\Diego\\Desktop\\ParcialFinalTaller\\parcialTallerFinal\\Examen4\\ClientApp\\src\\app\\eventos\\eventos-form\\eventos-form.component.ts"],"sourcesContent":["import { DatePipe } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IEvento } from '../Evento';\nimport { EventosService } from '../eventos.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-eventos-form',\n  templateUrl: './eventos-form.component.html',\n  styleUrls: ['./eventos-form.component.css'],\n  providers: [DatePipe]\n})\nexport class EventosFormComponent implements OnInit {\n  formGroup!: FormGroup;\n  //modoVerDetalle: boolean = false; // Set this based on your logic\n  eventoId! : number;\n\n  modoAgregar: boolean = false;\n  modoVerDetalle: boolean = false;\n  modoInscribirParticipane: boolean = false;\n\n  constructor(private fb: FormBuilder,\n              private eventoService: EventosService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private datePipe: DatePipe,) {}\n\n  ngOnInit() {\n    this.formGroup = this.fb.group({\n      nombre: ['', Validators.required],\n      descripcion: ['', Validators.required],\n      ubicacion: ['', Validators.required],\n      informacionContacto: ['', Validators.required],\n      fechaInicio: ['', Validators.required],\n      fechaFin: ['', Validators.required],\n      estado: { value: 'Activo', disabled: this.modoVerDetalle }\n    });\n\n    \n    this.activatedRoute.params.subscribe(params => {\n      if (params['id'] === undefined) {\n        this.modoAgregar = true;// a\n        return;\n      }\n      //this.modoVerDetalle = true;\n\n      this.eventoId = params['id'];\n\n      const urlSegments = this.activatedRoute.snapshot.url.map(segment => segment.path);\n      if (urlSegments.includes('inscribir-participante')) {\n        this.modoInscribirParticipane = true;\n      } else {\n        this.modoVerDetalle = true;\n      }\n\n//\n      this.eventoId = params['id'];\n      this.eventoService.getEvento(this.eventoId.toString())\n        .subscribe(evento => this.cargarFormulario(evento),\n                   error => console.error(error));\n    });\n\n\n    // if (this.modoVerDetalle  || this.modoInscribirParticipane) { //a\n    //   this.formGroup.disable();\n    // }\n  }\n\n  cargarFormulario(evento : IEvento){\n    const format = 'yyyy-MM-dd';\n\n    this.formGroup.patchValue({\n      nombre: evento.nombre,\n      descripcion: evento.descripcion,\n      ubicacion: evento.ubicacion,\n      informacionContacto: evento.informacionContacto,\n      fechaInicio: this.datePipe.transform(evento.fechaInicio, format),\n      fechaFin: this.datePipe.transform(evento.fechaFin, format),\n      estado: evento.estado\n    })\n  }\n\n  save() {\n    if (this.modoVerDetalle || this.modoInscribirParticipane ) return;//a\n\n    let evento: IEvento = Object.assign({}, this.formGroup.value);\n    console.table(evento);\n\n    //this.if(this.modoVerDetalle)\n    if(this.modoInscribirParticipane){\n      //EDITAR EL REGISTRO\n      evento.id = this.eventoId\n      //console.log(this.eventoId);\n      this.eventoService.updateEvento(evento)\n        .subscribe(evento => this.onSaveSuccess(),\n        error => console.error(error)\n      )\n    }else{ \n      //AGREGAR REGISTRO\n    this.eventoService.createEvento(evento)\n      .subscribe(evento => this.onSaveSuccess(),\n                 error => console.error(error));\n    }\n\n  }\n\n  //   if (this.modoEdicion) {\n  //     persona.id = this.personaId;\n\n  //     this.personaService.updatePersona(persona)\n  //       .subscribe(() => this.borrarDirecciones(),\n  //                  error => console.error(error));\n  //   } else {\n  //     this.personaService.createPersona(persona)\n  //       .subscribe(() => this.onSaveSuccess(),\n  //                  error => console.error(error));\n  //   }\n  // }\n\n\n\n\n\n\n\n\n  onSaveSuccess() {\n    this.router.navigate(['/eventos']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}