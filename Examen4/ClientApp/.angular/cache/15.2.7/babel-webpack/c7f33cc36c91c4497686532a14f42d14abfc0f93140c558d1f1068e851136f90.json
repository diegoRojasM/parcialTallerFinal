{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"El Email es requerido.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" El Email debe tener un formato valido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, LoginComponent_div_7_div_1_Template, 2, 0, \"div\", 9);\n    i0.ɵɵtemplate(2, LoginComponent_div_7_div_2_Template, 2, 0, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.email.errors == null ? null : ctx_r0.email.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.email.errors == null ? null : ctx_r0.email.errors[\"email\"]);\n  }\n}\nfunction LoginComponent_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"El Password es requerido.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, LoginComponent_div_12_div_1_Template, 2, 0, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.password.errors == null ? null : ctx_r1.password.errors[\"required\"]);\n  }\n}\nexport class LoginComponent {\n  constructor(http, baseUrl, formBuilder, router) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.usuarios = [];\n    this.loginEror = \"\";\n    this.loginForm = this.formBuilder.group({\n      email: ['diego@gmail.com', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n  get email() {\n    return this.loginForm.controls.email;\n  }\n  get password() {\n    return this.loginForm.controls.password;\n  }\n  login() {\n    if (this.loginForm.valid) {\n      console.log(\"Llamar al servicio de login\");\n      this.http.get(this.baseUrl + \"eventos\").subscribe({\n        next: result => {\n          this.usuarios = result;\n          console.log(result);\n          console.log(this.usuarios);\n        },\n        error: error => console.log(error),\n        complete: () => {\n          console.info(\"login completo\");\n          //this.login();\n          this.router.navigateByUrl(\"/inicio\");\n          this.loginForm.reset();\n        }\n      });\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 15,\n  vars: 4,\n  consts: [[3, \"formGroup\"], [1, \"mb-3\"], [\"for\", \"exampleInputEmail1\", 1, \"form-label\"], [\"formControlName\", \"email\", \"type\", \"email\", \"id\", \"exampleInputEmail1\", \"aria-describedby\", \"emailHelp\", 1, \"form-control\"], [\"class\", \"alert text-danger\", 4, \"ngIf\"], [\"for\", \"exampleInputPassword1\", 1, \"form-label\"], [\"formControlName\", \"password\", \"type\", \"password\", \"id\", \"exampleInputPassword1\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"alert\", \"text-danger\"], [4, \"ngIf\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"p\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵtemplate(7, LoginComponent_div_7_Template, 3, 2, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 1)(9, \"label\", 5);\n      i0.ɵɵtext(10, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 6);\n      i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_13_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵtext(14, \"Iniciar Sesion\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.loginError);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.email.invalid && (ctx.email.dirty || ctx.email.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.password.invalid && (ctx.password.dirty || ctx.password.touched));\n    }\n  },\n  dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,UAAU,QAAQ,gBAAgB;;;;;;;;ICQ5CC,2BAAwC;IAAAA,sCAAsB;IAAAA,iBAAM;;;;;IACpEA,2BAAqC;IACjCA,wDACJ;IAAAA,iBAAM;;;;;IANVA,8BAEK;IACDA,qEAAoE;IACpEA,qEAEM;IAEZA,iBAAM;;;;IALMA,eAAgC;IAAhCA,2FAAgC;IAChCA,eAA6B;IAA7BA,wFAA6B;;;;;IAazCA,2BAA2C;IAAAA,yCAAyB;IAAAA,iBAAM;;;;;IAH1EA,8BAEC;IACDA,sEAA0E;IACxEA,iBAAM;;;;IADFA,eAAmC;IAAnCA,iGAAmC;;;ADT/C,OAAM,MAAOC,cAAc;EAQvBC,YACUC,IAAgB,EACIC,OAAe,EACnCC,WAAwB,EACxBC,MAAc;IAHd,SAAI,GAAJH,IAAI;IACgB,YAAO,GAAPC,OAAO;IAC3B,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IAXX,aAAQ,GAAY,EAAE;IAC7B,cAAS,GAAQ,EAAE;IAEnB,cAAS,GAAC,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MAC7BC,KAAK,EAAC,CAAC,iBAAiB,EAAC,CAACT,UAAU,CAACU,QAAQ,EAACV,UAAU,CAACS,KAAK,CAAC,CAAC;MAChEE,QAAQ,EAAC,CAAC,EAAE,EAAC,CAACX,UAAU,CAACU,QAAQ,CAAC;KACnC,CAAC;EAQF;EAGF,IAAID,KAAK;IACP,OAAO,IAAI,CAACG,SAAS,CAACC,QAAQ,CAACJ,KAAK;EACtC;EACA,IAAIE,QAAQ;IACV,OAAO,IAAI,CAACC,SAAS,CAACC,QAAQ,CAACF,QAAQ;EACzC;EAEAG,KAAK;IACH,IAAG,IAAI,CAACF,SAAS,CAACG,KAAK,EAAC;MACtBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,IAAI,CAACb,IAAI,CAACc,GAAG,CAAa,IAAI,CAACb,OAAO,GAAG,SAAS,CAAC,CAACc,SAAS,CAAC;QAC5DC,IAAI,EAAGC,MAAM,IAAI;UACf,IAAI,CAACC,QAAQ,GAAGD,MAAM;UACtBL,OAAO,CAACC,GAAG,CAACI,MAAM,CAAC;UACnBL,OAAO,CAACC,GAAG,CAAC,IAAI,CAACK,QAAQ,CAAC;QAC5B,CAAC;QACDC,KAAK,EAAGA,KAAK,IAAKP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;QAGpCC,QAAQ,EAAE,MAAK;UACbR,OAAO,CAACS,IAAI,CAAC,gBAAgB,CAAC;UAC9B;UACA,IAAI,CAAClB,MAAM,CAACmB,aAAa,CAAC,SAAS,CAAC;UACpC,IAAI,CAACd,SAAS,CAACe,KAAK,EAAE;QACxB;OACD,CAAC;KAEH,MACG;MACF,IAAI,CAACf,SAAS,CAACgB,gBAAgB,EAAE;;EAErC;;AAjDW1B,cAAc;mBAAdA,cAAc,4DAUb,UAAU;AAAA;AAVXA,cAAc;QAAdA,cAAc;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCd3BhC,+BAA+B;MACxBA,YAAc;MAAAA,iBAAI;MACrBA,8BAAkB;MACmCA,qBAAK;MAAAA,iBAAQ;MAChEA,2BAAsH;MAEpHA,+DAQI;MACRA,iBAAM;MACNA,8BAAkB;MACsCA,yBAAQ;MAAAA,iBAAQ;MACtEA,4BAAkG;MAElGA,iEAIQ;MACVA,iBAAM;MAENA,kCAAgE;MAA1CA;QAAA,OAASiC,WAAO;MAAA,EAAC;MAAyBjC,+BAAc;MAAAA,iBAAS;;;MA3BrFA,yCAAuB;MACtBA,eAAc;MAAdA,oCAAc;MAKPA,eAAqD;MAArDA,kFAAqD;MAcvDA,eAA8D;MAA9DA,2FAA8D","names":["Validators","i0","LoginComponent","constructor","http","baseUrl","formBuilder","router","group","email","required","password","loginForm","controls","login","valid","console","log","get","subscribe","next","result","usuarios","error","complete","info","navigateByUrl","reset","markAllAsTouched","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Diego\\Desktop\\ParcialFinalTaller\\parcialTallerFinal\\Examen4\\ClientApp\\src\\app\\auth\\login\\login.component.ts","C:\\Users\\Diego\\Desktop\\ParcialFinalTaller\\parcialTallerFinal\\Examen4\\ClientApp\\src\\app\\auth\\login\\login.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { IUsuario } from './IUsuario';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  public usuarios:IUsuario[]=[];\n  loginEror:string=\"\";\n\n  loginForm=this.formBuilder.group({\n      email:['diego@gmail.com',[Validators.required,Validators.email]],\n      password:['',[Validators.required]]\n    })\n    constructor(\n      private http: HttpClient, \n      @Inject('BASE_URL') private baseUrl: string,\n      private formBuilder: FormBuilder, \n      private router: Router\n    ) {\n\n    }\n    \n\n  get email(){\n    return this.loginForm.controls.email;\n  }\n  get password(){\n    return this.loginForm.controls.password;\n  }\n\n  login(){\n    if(this.loginForm.valid){\n      console.log(\"Llamar al servicio de login\")\n      this.http.get<IUsuario[]>(this.baseUrl + \"eventos\").subscribe({\n        next: (result) => {\n          this.usuarios = result;\n          console.log(result);\n          console.log(this.usuarios);\n        },\n        error: (error) => console.log(error)\n          \n        ,\n        complete: () => {\n          console.info(\"login completo\");\n          //this.login();\n          this.router.navigateByUrl(\"/inicio\");\n          this.loginForm.reset();\n        }\n      });\n\n    }\n    else{\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n\n}\n\n","<form [formGroup]=\"loginForm\" >\n    <p>{{loginError}}</p>\n    <div class=\"mb-3\">\n      <label for=\"exampleInputEmail1\" class=\"form-label\">Email</label>\n      <input formControlName=\"email\" type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\">\n      \n        <div *ngIf=\"email.invalid && (email.dirty || email.touched)\"\n            class=\"alert text-danger\"\n            >\n            <div *ngIf=\"email.errors?.['required']\">El Email es requerido.</div>\n            <div *ngIf=\"email.errors?.['email']\">\n                El Email debe tener un formato valido.\n            </div>\n\n      </div>\n    </div>\n    <div class=\"mb-3\">\n      <label for=\"exampleInputPassword1\" class=\"form-label\">Password</label>\n      <input formControlName=\"password\" type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\">\n\n      <div *ngIf=\"password.invalid && (password.dirty || password.touched)\"\n      class=\"alert text-danger\"\n      >\n      <div *ngIf=\"password.errors?.['required']\">El Password es requerido.</div>\n        </div>\n    </div>\n\n    <button type=\"submit\" (click)=\"login()\" class=\"btn btn-primary\">Iniciar Sesion</button>\n  </form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}