{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    // pass: Aa123456!\n    this.apiURL = this.baseUrl + \"account\";\n  }\n  create(userInfo) {\n    return this.http.post(this.apiURL + \"/Create\", userInfo);\n  }\n  login(userInfo) {\n    return this.http.post(this.apiURL + \"/Login\", userInfo);\n  }\n  obtenerToken() {\n    return localStorage.getItem(\"token\");\n  }\n  obtenerExpiracionToken() {\n    return localStorage.getItem(\"tokenExpiration\");\n  }\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"tokenExpiration\");\n  }\n  estaLogueado() {\n    var exp = this.obtenerExpiracionToken();\n    if (!exp) {\n      // el token no existe\n      return false;\n    }\n    var now = new Date().getTime();\n    var dateExp = new Date(exp);\n    if (now >= dateExp.getTime()) {\n      // ya expiró el token\n      localStorage.removeItem('token');\n      localStorage.removeItem('tokenExpiration');\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,cAAc;EAIzBC,YAAoBC,IAAgB,EAA8BC,OAAe;IAA7D,SAAI,GAAJD,IAAI;IAA0C,YAAO,GAAPC,OAAO;IAHzE;IACQ,WAAM,GAAG,IAAI,CAACA,OAAO,GAAG,SAAS;EAE4C;EAErFC,MAAM,CAACC,QAAmB;IACxB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,IAAI,CAACC,MAAM,GAAG,SAAS,EAAEF,QAAQ,CAAC;EAC/D;EAEAG,KAAK,CAACH,QAAmB;IACvB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,IAAI,CAACC,MAAM,GAAG,QAAQ,EAAEF,QAAQ,CAAC;EAC9D;EAEAI,YAAY;IACV,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;EACvC;EAEAC,sBAAsB;IACpB,OAAOF,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAE;EACjD;EAEAE,MAAM;IACJH,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;IAChCJ,YAAY,CAACI,UAAU,CAAC,iBAAiB,CAAC;EAC5C;EAEAC,YAAY;IAEV,IAAIC,GAAG,GAAG,IAAI,CAACJ,sBAAsB,EAAE;IAEvC,IAAI,CAACI,GAAG,EAAE;MACR;MACA,OAAO,KAAK;;IAGd,IAAIC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAC9B,IAAIC,OAAO,GAAG,IAAIF,IAAI,CAACF,GAAG,CAAC;IAE3B,IAAIC,GAAG,IAAIG,OAAO,CAACD,OAAO,EAAE,EAAE;MAC5B;MACAT,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;MAChCJ,YAAY,CAACI,UAAU,CAAC,iBAAiB,CAAC;MAC1C,OAAO,KAAK;KACb,MAAM;MACL,OAAO,IAAI;;EAGf;;AAhDWd,cAAc;mBAAdA,cAAc,0CAIqB,UAAU;AAAA;AAJ7CA,cAAc;SAAdA,cAAc;EAAAqB,SAAdrB,cAAc;AAAA","names":["AccountService","constructor","http","baseUrl","create","userInfo","post","apiURL","login","obtenerToken","localStorage","getItem","obtenerExpiracionToken","logout","removeItem","estaLogueado","exp","now","Date","getTime","dateExp","factory"],"sourceRoot":"","sources":["C:\\Users\\Diego\\Desktop\\ParcialFinalTaller\\parcialTallerFinal\\Examen4\\ClientApp\\src\\app\\account\\account.service.ts"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IUserInfo } from './user-info';\n\n@Injectable()\nexport class AccountService {\n  // pass: Aa123456!\n  private apiURL = this.baseUrl + \"account\";\n\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) { }\n\n  create(userInfo: IUserInfo): Observable<any> {\n    return this.http.post<any>(this.apiURL + \"/Create\", userInfo);\n  }\n\n  login(userInfo: IUserInfo): Observable<any> { \n    return this.http.post<any>(this.apiURL + \"/Login\", userInfo);\n  }\n\n  obtenerToken(): string {\n    return localStorage.getItem(\"token\")!;\n  }\n\n  obtenerExpiracionToken(): string {\n    return localStorage.getItem(\"tokenExpiration\")!;\n  }\n\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"tokenExpiration\");\n  }\n\n  estaLogueado(): boolean {\n\n    var exp = this.obtenerExpiracionToken();\n\n    if (!exp) {\n      // el token no existe\n      return false;\n    }\n\n    var now = new Date().getTime();\n    var dateExp = new Date(exp);\n\n    if (now >= dateExp.getTime()) {\n      // ya expiró el token\n      localStorage.removeItem('token');\n      localStorage.removeItem('tokenExpiration');\n      return false;\n    } else {\n      return true;\n    }\n    \n  }\n\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}