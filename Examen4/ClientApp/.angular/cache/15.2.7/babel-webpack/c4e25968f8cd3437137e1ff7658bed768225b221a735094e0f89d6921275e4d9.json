{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../account/account.service\";\nexport class AuthInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    const token = this.accountService.obtenerToken();\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AccountService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAE1BC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAmB;EAErDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,KAAK,GAAG,IAAI,CAACJ,cAAc,CAACK,YAAY,EAAE;IAEhD,IAAID,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUJ,KAAK;;OAEjC,CAAC;;IAGJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC7B;;AAhBWJ,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAY,SAAfZ,eAAe;AAAA","names":["AuthInterceptor","constructor","accountService","intercept","request","next","token","obtenerToken","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\Diego\\Desktop\\ParcialFinalTaller\\parcialTallerFinal\\Examen4\\ClientApp\\src\\app\\services\\auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AccountService } from '../account/account.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private accountService: AccountService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.accountService.obtenerToken();\n    \n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}