{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport 'rxjs/add/operator/do';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class LogInterceptorService {\n  constructor() {}\n  intercept(req, next) {\n    return next.handle(req).pipe(tap(evt => {\n      if (evt instanceof HttpResponse) {\n        console.log(evt.body);\n      }\n    }));\n  }\n}\nLogInterceptorService.ɵfac = function LogInterceptorService_Factory(t) {\n  return new (t || LogInterceptorService)();\n};\nLogInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LogInterceptorService,\n  factory: LogInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAsGA,YAAY,QAAsC,sBAAsB;AAG9K,OAAO,sBAAsB;AAC7B,SAASC,GAAG,QAAQ,gBAAgB;;AAMpC,OAAM,MAAOC,qBAAqB;EAEhCC,eAAgB;EAEhBC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAEhD,OAAOA,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,IAAI,CAC1BP,GAAG,CAACQ,GAAG,IAAG;MACR,IAAIA,GAAG,YAAYT,YAAY,EAAE;QAC/BU,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAAC;;IAEzB,CAAC,CAAC,CACH;EAGH;;AAfWV,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAAW,SAArBX,qBAAqB;EAAAY,YAFpB;AAAM","names":["HttpResponse","tap","LogInterceptorService","constructor","intercept","req","next","handle","pipe","evt","console","log","body","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Diego\\Desktop\\ParcialFinalTaller\\parcialTallerFinal\\Examen4\\ClientApp\\src\\app\\services\\log-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpHeaderResponse, HttpInterceptor, HttpProgressEvent, HttpRequest, HttpResponse, HttpSentEvent, HttpUserEvent } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/do';\nimport { tap } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogInterceptorService implements HttpInterceptor{\n\n  constructor() { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n\n    return next.handle(req).pipe(\n      tap(evt => {\n        if (evt instanceof HttpResponse) {\n          console.log(evt.body);\n        }\n      })\n    );\n    \n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}