{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../account.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_span_9_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" El campo email es requerido \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtemplate(1, RegisterComponent_span_9_span_1_Template, 2, 0, \"span\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.formGroup.get(\"email\").errors.required);\n  }\n}\nfunction RegisterComponent_span_15_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" El campo password es requerido \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtemplate(1, RegisterComponent_span_15_span_1_Template, 2, 0, \"span\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.formGroup.get(\"password\").errors.required);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"has-error\": a0\n  };\n};\nconst _c1 = function () {\n  return [\"/\"];\n};\nexport class RegisterComponent {\n  constructor(fb, accountService, router) {\n    this.fb = fb;\n    this.accountService = accountService;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.formGroup = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  loguearse() {\n    if (this.formGroup.valid) {\n      let userInfo = Object.assign({}, this.formGroup.value);\n      this.accountService.login(userInfo).subscribe({\n        next: token => this.recibirToken(token),\n        error: error => this.manejarError(error)\n      });\n    } else {\n      alert('Formulario no válido. Por favor, revisa los campos.');\n    }\n  }\n  registrarse() {\n    if (this.formGroup.valid) {\n      let userInfo = Object.assign({}, this.formGroup.value);\n      this.accountService.create(userInfo).subscribe({\n        next: token => this.recibirToken(token),\n        error: error => this.manejarError(error)\n      });\n    } else {\n      alert('Formulario no válido. Por favor, revisa los campos.');\n    }\n  }\n  recibirToken(token) {\n    localStorage.setItem('token', token.token);\n    localStorage.setItem('tokenExpiration', token.expiration);\n    this.router.navigate([\"\"]);\n  }\n  manejarError(error) {\n    if (error && error.error) {\n      const errorMessage = error.error.message || 'Error al procesar la solicitud.';\n      alert(errorMessage);\n    } else {\n      alert('Error desconocido.');\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AccountService), i0.ɵɵdirectiveInject(i3.Router));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 25,\n  vars: 13,\n  consts: [[\"novalidate\", \"\", 1, \"form-horizontal\", 3, \"formGroup\"], [1, \"form-group\", 3, \"ngClass\"], [\"for\", \"emailId\", 1, \"col-md-2\", \"control-label\"], [1, \"col-md-8\"], [\"id\", \"emailId\", \"type\", \"text\", \"required\", \"\", \"formControlName\", \"email\", 1, \"form-control\"], [\"class\", \"help-block\", 4, \"ngIf\"], [\"for\", \"passwordId\", 1, \"col-md-2\", \"control-label\"], [\"id\", \"passwordId\", \"type\", \"password\", \"required\", \"\", \"formControlName\", \"password\", 1, \"form-control\"], [1, \"form-group\"], [1, \"col-md-6\", \"col-md-offset-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"btn\", 3, \"routerLink\"], [1, \"help-block\"], [4, \"ngIf\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Ingrese sus Datos\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0)(3, \"fieldset\")(4, \"div\", 1)(5, \"label\", 2);\n      i0.ɵɵtext(6, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 3);\n      i0.ɵɵelement(8, \"input\", 4);\n      i0.ɵɵtemplate(9, RegisterComponent_span_9_Template, 2, 1, \"span\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 1)(11, \"label\", 6);\n      i0.ɵɵtext(12, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 3);\n      i0.ɵɵelement(14, \"input\", 7);\n      i0.ɵɵtemplate(15, RegisterComponent_span_15_Template, 2, 1, \"span\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 8)(17, \"div\", 9)(18, \"span\")(19, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_19_listener() {\n        return ctx.loguearse();\n      });\n      i0.ɵɵtext(20, \" Loguearse \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_21_listener() {\n        return ctx.registrarse();\n      });\n      i0.ɵɵtext(22, \" Registrarse \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"button\", 11);\n      i0.ɵɵtext(24, \" Cancelar \");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c0, (ctx.formGroup.get(\"email\").touched || ctx.formGroup.get(\"email\").dirty) && !ctx.formGroup.get(\"email\").valid));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.formGroup.get(\"email\").touched || ctx.formGroup.get(\"email\").dirty) && ctx.formGroup.get(\"email\").errors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, (ctx.formGroup.get(\"password\").touched || ctx.formGroup.get(\"password\").dirty) && !ctx.formGroup.get(\"password\").valid));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.formGroup.get(\"password\").touched || ctx.formGroup.get(\"password\").dirty) && ctx.formGroup.get(\"password\").errors);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"disabled\", !ctx.formGroup.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.formGroup.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(12, _c1));\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i3.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","RegisterComponent","constructor","fb","accountService","router","ngOnInit","formGroup","group","email","required","password","minLength","loguearse","valid","userInfo","Object","assign","value","login","subscribe","next","token","recibirToken","error","manejarError","alert","registrarse","create","localStorage","setItem","expiration","navigate","errorMessage","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Diego\\Desktop\\ParcialFinalTaller\\parcialTallerFinal\\Examen4\\ClientApp\\src\\app\\account\\register\\register.component.ts","C:\\Users\\Diego\\Desktop\\ParcialFinalTaller\\parcialTallerFinal\\Examen4\\ClientApp\\src\\app\\account\\register\\register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IUserInfo } from '../user-info';\nimport { AccountService } from '../account.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  formGroup!: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private accountService: AccountService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.formGroup = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n    });\n  }\n\n  loguearse() {\n    if (this.formGroup.valid) {\n      let userInfo: IUserInfo = Object.assign({}, this.formGroup.value);\n      this.accountService.login(userInfo).subscribe({\n        next: (token) => this.recibirToken(token),\n        error: (error) => this.manejarError(error)\n      });\n    } else {\n      alert('Formulario no válido. Por favor, revisa los campos.');\n    }\n  }\n\n  registrarse() {\n    if (this.formGroup.valid) {\n      let userInfo: IUserInfo = Object.assign({}, this.formGroup.value);\n      this.accountService.create(userInfo).subscribe({\n        next: (token) => this.recibirToken(token),\n        error: (error) => this.manejarError(error)\n      });\n    } else {\n      alert('Formulario no válido. Por favor, revisa los campos.');\n    }\n  }\n\n  recibirToken(token: { token: string; expiration: string; }) {\n    localStorage.setItem('token', token.token);\n    localStorage.setItem('tokenExpiration', token.expiration);\n    this.router.navigate([\"\"]);\n  }\n\n  manejarError(error: any) {\n    if (error && error.error) {\n      const errorMessage = error.error.message || 'Error al procesar la solicitud.';\n      alert(errorMessage);\n    } else {\n      alert('Error desconocido.');\n    }\n  }\n}\n","<h1>Ingrese sus Datos</h1>\n<form class=\"form-horizontal\" novalidate\n      [formGroup]=\"formGroup\">\n  <fieldset>\n\n    <div class=\"form-group\"\n         [ngClass]=\"{'has-error': (formGroup.get('email')!.touched || formGroup.get('email')!.dirty) && !formGroup.get('email')!.valid }\">\n      <label class=\"col-md-2 control-label\"\n             for=\"emailId\">Email</label>\n\n      <div class=\"col-md-8\">\n        <input class=\"form-control\"\n               id=\"emailId\"\n               type=\"text\"\n               required\n               formControlName=\"email\" />\n        <span class=\"help-block\" *ngIf=\"(formGroup.get('email')!.touched || formGroup.get('email')!.dirty) && formGroup.get('email')!.errors\">\n          <span *ngIf=\"formGroup.get('email')!.errors!.required\">\n            El campo email es requerido\n          </span>\n        </span>\n      </div>\n    </div>\n\n    <div class=\"form-group\"\n         [ngClass]=\"{'has-error': (formGroup.get('password')!.touched || formGroup.get('password')!.dirty) && !formGroup.get('password')!.valid }\">\n      <label class=\"col-md-2 control-label\"\n             for=\"passwordId\">Password</label>\n\n      <div class=\"col-md-8\">\n        <input class=\"form-control\"\n               id=\"passwordId\"\n               type=\"password\"\n               required\n               formControlName=\"password\" />\n        <span class=\"help-block\" *ngIf=\"(formGroup.get('password')!.touched || formGroup.get('password')!.dirty) && formGroup.get('password')!.errors\">\n          <span *ngIf=\"formGroup.get('password')!.errors!.required\">\n            El campo password es requerido\n          </span>\n        </span>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div class=\"col-md-6 col-md-offset-2\">\n        <span>\n          <button class=\"btn btn-primary\"\n                  type=\"button\"\n                  (click)=\"loguearse()\"\n                  [disabled]=\"!formGroup.valid\">\n            Loguearse\n          </button>\n          <button class=\"btn btn-primary\"\n                  type=\"button\"\n                  (click)=\"registrarse()\"\n                  [disabled]=\"!formGroup.valid\">\n            Registrarse\n          </button>\n          <button class=\"btn\"\n                  type=\"button\"\n                  [routerLink]='[\"/\"]'>\n            Cancelar\n          </button>\n        </span>\n\n      </div>\n\n    </div>\n\n  </fieldset>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}