{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../account/account.service\";\nexport class AuthInterceptorService {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(req, next) {\n    var token = this.accountService.obtenerToken();\n    req = req.clone({\n      setHeaders: {\n        Authorization: \"bearer \" + token\n      }\n    });\n    return next.handle(req);\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AccountService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,sBAAsB;EAEjCC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAoB;EAEtDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,IAAIC,KAAK,GAAG,IAAI,CAACJ,cAAc,CAACK,YAAY,EAAE;IAC9CH,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC;MACdC,UAAU,EAAE;QAAEC,aAAa,EAAE,SAAS,GAAGJ;MAAK;KAC/C,CAAC;IACF,OAAOD,IAAI,CAACM,MAAM,CAACP,GAAG,CAAC;EACzB;;AAVWJ,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAY,SAAtBZ,sBAAsB;AAAA","names":["AuthInterceptorService","constructor","accountService","intercept","req","next","token","obtenerToken","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\Diego\\Desktop\\ParcialFinalTaller\\parcialTallerFinal\\Examen4\\ClientApp\\src\\app\\services\\auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpResponse, HttpSentEvent, HttpHeaderResponse, HttpProgressEvent, HttpUserEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AccountService } from '../account/account.service';\n\n@Injectable()\nexport class AuthInterceptorService implements HttpInterceptor {\n\n  constructor(private accountService: AccountService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {\n    var token = this.accountService.obtenerToken();\n    req = req.clone({\n      setHeaders: { Authorization: \"bearer \" + token }\n    });\n    return next.handle(req);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}